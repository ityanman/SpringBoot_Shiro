<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ityan.SpringBoot_Shiro.mapper.EmployeeMapper">
    <resultMap id="BaseResultMap" type="com.ityan.SpringBoot_Shiro.domain.Employee" >
        <id column="id" property="id" jdbcType="BIGINT" />
        <result column="username" property="username" jdbcType="VARCHAR" />
        <result column="inputtime" property="inputtime" jdbcType="TIMESTAMP" />
        <result column="tel" property="tel" jdbcType="VARCHAR" />
        <result column="email" property="email" jdbcType="VARCHAR" />
        <result column="state" property="state" jdbcType="BIT" />
        <result column="admin" property="admin" jdbcType="BIT" />
        <association property="department" javaType="com.ityan.SpringBoot_Shiro.domain.Department" columnPrefix="d_">
            <result column="id" property="id"/>
            <result column="name" property="name"/>
            <result column="sn" property="sn"/>
            <result column="managerId" property="managerId"/>
            <result column="parentId" property="parentId"/>
            <result column="state" property="state"/>
        </association>
    </resultMap>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from employee
    where id = #{id,jdbcType=BIGINT}
  </delete>
    <!--//删除员工对应角色的关系-->
    <delete id="deleteEmployeeAndRoleRel">
    delete from employee_role_res where eid = #{id}
  </delete>
    <insert id="insert" parameterType="com.ityan.SpringBoot_Shiro.domain.Employee" useGeneratedKeys="true" keyProperty="id">
    insert into employee (
id,
username,
password,
inputtime,
tel,
email,
state,
admin,
dep_id)
    values (#{id}, #{username}, #{password},#{inputtime},
      #{tel}, #{email}, #{state}, #{admin},
      #{department.id})
  </insert>
    <!--保存员工和角色 关系-->
    <insert id="insertEmployeeAndRoleRel">
    insert into employee_role_res(eid,rid) values (#{id},#{rid})
  </insert>
    <update id="updateByPrimaryKey" parameterType="com.ityan.SpringBoot_Shiro.domain.Employee" >
    update employee
    set username = #{username,jdbcType=VARCHAR},
      inputtime = #{inputtime,jdbcType=TIMESTAMP},
      tel = #{tel,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      state = #{state,jdbcType=BIT},
      admin = #{admin,jdbcType=BIT},
      dep_id = #{department.id}
    where id = #{id,jdbcType=BIGINT}
  </update>
    <!--更新员工状态-->
    <update id="updateState">
    update employee set state = false where id = #{id}
  </update>

    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select id, username, inputtime, tel, email, state, admin, dep_id
    from employee
    where id = #{id,jdbcType=BIGINT}
  </select>
    <!--根据username查询员工-->
    <select id="selectByUsername" resultType="com.ityan.SpringBoot_Shiro.domain.Employee" >
    select id, username,password,inputtime, tel, email, state, admin, dep_id
    from employee
    where username = #{username}
  </select>

    <sql id="Where_Keyword">
        <where>
            <if test="keyword!=null and keyword!=''">
                and e.username like concat('%',#{keyword},'%')
                or e.email like concat('%',#{keyword},'%')
                or e.tel like concat('%',#{keyword},'%')
            </if>
        </where>
    </sql>
    <select id="selectAll" resultMap="BaseResultMap" >
        select e.id, e.username, e.inputtime, e.tel, e.email, e.state, e.admin, e.dep_id,d.id as d_id,d.`name`as d_name
        from employee as e LEFT JOIN department as d on e.dep_id = d.id
        <include refid="Where_Keyword"></include>
    </select>
    <!--根据员工id查询对应的角色编号-->
    <select id="getRolesByEid" resultType="java.lang.String">
      SELECT r.rnum
      FROM employee_role_res AS er LEFT JOIN role as r
      on er.rid = r.rid
      WHERE er.eid = #{id}
    </select>
    <!--//根据员工id查询对应的权限-->
    <select id="getPermissions" resultType="java.lang.String">
    SELECT DISTINCT presource
    FROM role_permission_rel as rp LEFT JOIN permission as p
    on rp.pid = p.pid
    WHERE rp.rid in(SELECT rid from employee_role_res WHERE eid = #{id})
  </select>

</mapper>